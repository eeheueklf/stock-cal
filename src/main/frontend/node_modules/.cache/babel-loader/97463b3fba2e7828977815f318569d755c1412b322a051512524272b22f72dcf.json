{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eeheu\\\\Documents\\\\15.Lab\\\\10.react\\\\StockCalc\\\\src\\\\main\\\\frontend\\\\src\\\\page\\\\DividendCalc.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport CalculatorForm from './CalculatorForm';\nimport Results from './Results';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DividendCalculator() {\n  _s();\n  const [result, setResult] = useState(null);\n  const handleCalculate = data => {\n    const {\n      inflationRate,\n      dividendGrowthRate,\n      dividendYield,\n      dividendFrequency,\n      taxStatus,\n      reinvestDividends,\n      initialInvestment,\n      monthlyInvestment,\n      monthlyIncrease\n    } = data;\n\n    // 계산 로직을 여기에 추가합니다.\n    let totalValue = initialInvestment;\n    let annualDividend = initialInvestment * dividendYield;\n    let monthCounter = 0;\n\n    // 월별 적립금과 증액을 계산하는 로직\n    while (monthCounter < 12) {\n      totalValue += monthlyInvestment;\n      if (monthlyIncrease) monthlyInvestment += monthlyInvestment * (monthlyIncrease / 100);\n      annualDividend = totalValue * dividendYield;\n\n      // 배당 재투자 계산 (배당금이 재투자되는 경우)\n      if (reinvestDividends) {\n        totalValue += annualDividend;\n      }\n      totalValue *= 1 + dividendGrowthRate; // 배당 성장률을 반영하여 총액 증가\n      totalValue *= 1 + inflationRate; // 물가 상승률을 반영하여 총액 증가\n\n      monthCounter++;\n    }\n    setResult(totalValue.toFixed(2)); // 최종 계산 결과\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBC30\\uB2F9 \\uC7AC\\uD22C\\uC790 \\uACC4\\uC0B0\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorForm, {\n      onSubmit: handleCalculate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(Results, {\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(DividendCalculator, \"X4bz0btR6WTE+CkTerVmRyY/5iQ=\");\n_c = DividendCalculator;\nvar _c;\n$RefreshReg$(_c, \"DividendCalculator\");","map":{"version":3,"names":["useState","CalculatorForm","Results","jsxDEV","_jsxDEV","DividendCalculator","_s","result","setResult","handleCalculate","data","inflationRate","dividendGrowthRate","dividendYield","dividendFrequency","taxStatus","reinvestDividends","initialInvestment","monthlyInvestment","monthlyIncrease","totalValue","annualDividend","monthCounter","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/eeheu/Documents/15.Lab/10.react/StockCalc/src/main/frontend/src/page/DividendCalc.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport CalculatorForm from './CalculatorForm';\r\nimport Results from './Results';\r\n\r\nexport default function DividendCalculator() {\r\n    const [result, setResult] = useState(null);\r\n\r\n    const handleCalculate = (data) => {\r\n        const {\r\n            inflationRate,\r\n            dividendGrowthRate,\r\n            dividendYield,\r\n            dividendFrequency,\r\n            taxStatus,\r\n            reinvestDividends,\r\n            initialInvestment,\r\n            monthlyInvestment,\r\n            monthlyIncrease,\r\n        } = data;\r\n\r\n        // 계산 로직을 여기에 추가합니다.\r\n        let totalValue = initialInvestment;\r\n        let annualDividend = initialInvestment * dividendYield;\r\n        let monthCounter = 0;\r\n\r\n        // 월별 적립금과 증액을 계산하는 로직\r\n        while (monthCounter < 12) {\r\n            totalValue += monthlyInvestment;\r\n            if (monthlyIncrease) monthlyInvestment += monthlyInvestment * (monthlyIncrease / 100);\r\n            annualDividend = totalValue * dividendYield;\r\n\r\n            // 배당 재투자 계산 (배당금이 재투자되는 경우)\r\n            if (reinvestDividends) {\r\n                totalValue += annualDividend;\r\n            }\r\n\r\n            totalValue *= (1 + dividendGrowthRate); // 배당 성장률을 반영하여 총액 증가\r\n            totalValue *= (1 + inflationRate); // 물가 상승률을 반영하여 총액 증가\r\n\r\n            monthCounter++;\r\n        }\r\n\r\n        setResult(totalValue.toFixed(2)); // 최종 계산 결과\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>배당 재투자 계산기</h1>\r\n            <CalculatorForm onSubmit={handleCalculate} />\r\n            {result && <Results result={result} />}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMS,eAAe,GAAIC,IAAI,IAAK;IAC9B,MAAM;MACFC,aAAa;MACbC,kBAAkB;MAClBC,aAAa;MACbC,iBAAiB;MACjBC,SAAS;MACTC,iBAAiB;MACjBC,iBAAiB;MACjBC,iBAAiB;MACjBC;IACJ,CAAC,GAAGT,IAAI;;IAER;IACA,IAAIU,UAAU,GAAGH,iBAAiB;IAClC,IAAII,cAAc,GAAGJ,iBAAiB,GAAGJ,aAAa;IACtD,IAAIS,YAAY,GAAG,CAAC;;IAEpB;IACA,OAAOA,YAAY,GAAG,EAAE,EAAE;MACtBF,UAAU,IAAIF,iBAAiB;MAC/B,IAAIC,eAAe,EAAED,iBAAiB,IAAIA,iBAAiB,IAAIC,eAAe,GAAG,GAAG,CAAC;MACrFE,cAAc,GAAGD,UAAU,GAAGP,aAAa;;MAE3C;MACA,IAAIG,iBAAiB,EAAE;QACnBI,UAAU,IAAIC,cAAc;MAChC;MAEAD,UAAU,IAAK,CAAC,GAAGR,kBAAmB,CAAC,CAAC;MACxCQ,UAAU,IAAK,CAAC,GAAGT,aAAc,CAAC,CAAC;;MAEnCW,YAAY,EAAE;IAClB;IAEAd,SAAS,CAACY,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;EAED,oBACInB,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBrB,OAAA;MAAAqB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBzB,OAAA,CAACH,cAAc;MAAC6B,QAAQ,EAAErB;IAAgB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5CtB,MAAM,iBAAIH,OAAA,CAACF,OAAO;MAACK,MAAM,EAAEA;IAAO;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEd;AAACvB,EAAA,CAhDuBD,kBAAkB;AAAA0B,EAAA,GAAlB1B,kBAAkB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}